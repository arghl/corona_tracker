swagger: '2.0'
info:
  version: '4.8'
  title: wvsv_corona_tracker
host: localhost
basePath: /api/v1
schemes:
  - http
security:
  - basicAuth: []
consumes:
  - application/json
produces:
  - application/json
paths:
  /positions:
    get:
      summary: Fetches a list of Positions
      description: 'Without any params, it returns a list of last known positions for all the user''s Devices. _from_ and _to_ fields are not required with _id_'
      consumes:
        - application/json
        - text/csv
        - application/gpx+xml
      produces:
        - application/json
        - text/csv
        - application/gpx+xml
      parameters:
        - name: userId
          in: query
          required: false
          type: integer
        - name: from
          in: query
          description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
          required: false
          type: string
          format: date-time
        - name: id
          in: query
          description: To fetch one or more positions. Multiple params can be passed like `id=31&id=42`
          required: false
          type: integer
          collectionFormat: multi
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Position'
  /users:
    get:
      summary: Fetch a list of Users
      parameters:
        - name: userId
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: No Permission
    post:
      summary: Create a User
      parameters:
        - $ref: '#/parameters/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
  '/users/{id}':
    put:
      summary: Update a User
      parameters:
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
    delete:
      summary: Delete a User
      parameters:
        - $ref: '#/parameters/entityId'
      responses:
        '204':
          description: No Content
  /geofences:
    get:
      summary: Fetch a list of Geofences
      description: 'Without params, it returns a list of Geofences the user has access to'
      parameters:
        - $ref: '#/parameters/all'
        - $ref: '#/parameters/userId'
        - $ref: '#/parameters/refresh'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Geofence'
    post:
      summary: Create a Geofence
      parameters:
        - $ref: '#/parameters/Geofence'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Geofence'
  '/geofences/{id}':
    put:
      summary: Update a Geofence
      parameters:
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/Geofence'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Geofence'
    delete:
      summary: Delete a Geofence
      parameters:
        - $ref: '#/parameters/entityId'
      responses:
        '204':
          description: No Content
  /reports/locations:
    get:
      summary: Fetch a list of  within the time period for the Device
      description: At least one userId must be passed
      parameters:
        - $ref: '#/parameters/userIdArray'
        - $ref: '#/parameters/fromTime'
        - $ref: '#/parameters/toTime'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ReportTrips'
definitions:
  Position:
    properties:
      id:
        type: integer
      deviceId:
        type: integer
      protocol:
        type: string
      outdated:
        type: boolean
      valid:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      altitude:
        type: number
      network:
        type: object
        additionalProperties: true
  User:
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      password:
        type: string
      disabled:
        type: boolean
      expirationTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      deviceLimit:
        type: integer
      userLimit:
        type: integer
      deviceReadonly:
        type: boolean
      poiLayer:
        type: string
      token:
        type: string
  Geofence:
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      area:
        type: string
  Event:
    properties:
      id:
        type: integer
      type:
        type: string
      serverTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      positionId:
        type: integer
      geofenceId:
        type: integer
      maintenanceId:
        type: integer
  ReportSummary:
    properties:
      deviceName:
        type: string
      maxSpeed:
        type: number
        description: in knots
      averageSpeed:
        type: number
        description: in knots
      distance:
        type: number
        description: in meters
      spentFuel:
        type: number
        description: in liters
      engineHours:
        type: integer
  ReportTrips:
    properties:
      deviceName:
        type: string
      maxSpeed:
        type: number
        description: in knots
      averageSpeed:
        type: number
        description: in knots
      distance:
        type: number
        description: in meters
      spentFuel:
        type: number
        description: in liters
      duration:
        type: integer
      startTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      startAddress:
        type: string
      startLat:
        type: number
      startLon:
        type: number
      endTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      endAddress:
        type: string
      endLat:
        type: number
      endLon:
        type: number
  ReportStops:
    properties:
      deviceName:
        type: string
      duration:
        type: integer
      startTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      address:
        type: string
      lat:
        type: number
      lon:
        type: number
      endTime:
        type: string
        format: date-time
        description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
      spentFuel:
        type: number
        description: in liters
      engineHours:
        type: integer
  DeviceAccumulators:
    properties:
      totalDistance:
        type: number
        description: in meters
      hours:
        type: number
parameters:
  entityId:
    name: id
    in: path
    required: true
    type: integer
  all:
    name: all
    in: query
    description: Can only be used by admins or managers to fetch all entities
    type: boolean
  refresh:
    name: refresh
    in: query
    required: false
    type: boolean
  userId:
    name: userId
    in: query
    description: Standard users can use this only with their own _userId_
    type: integer
  User:
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/User'
  Geofence:
    name: body
    in: body
    required: true
    schema:
      $ref: '#/definitions/Geofence'
  deviceIdArray:
    name: deviceId
    in: query
    type: array
    items:
      type: integer
    collectionFormat: multi
  userIdArray:
    name: deviceId
    in: query
    type: array
    items:
      type: string
    collectionFormat: multi
  fromTime:
    name: from
    in: query
    description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    required: true
    type: string
    format: date-time
  toTime:
    name: to
    in: query
    description: 'in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    required: true
    type: string
    format: date-time
securityDefinitions:
  basicAuth:
    type: basic
    description: Basic HTTP authorization with _email_ and _password_
